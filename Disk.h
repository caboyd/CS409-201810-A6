#pragma once
#include "lib/ObjLibrary/ModelWithShader.h"


using ObjLibrary::Vector3;

enum DiskType
{
	RED_ROCK = 0,
	LEAFY = 1,
	ICY = 2,
	SANDY = 3,
	GREY_ROCK = 4
};


//Disk abstract class
//Points to a disk model
//Has a radius, position and type
//Can draw itself
class Disk
{
public:
	ObjLibrary::ModelWithShader const* model{};
	ObjLibrary::ModelWithShader heightMapModel{};
	std::vector<std::vector<float>> heightMap{};
	unsigned int heightMapSize{};
	Vector3 position{};
	float radius{};
	DiskType type{};

public:
	Disk() = default;
	Disk(const Disk& other) = default;
	Disk(Disk&& other) = default;
	Disk& operator=(const Disk& other) = default;
	Disk& operator=(Disk&& other) = default;

	virtual ~Disk() = default;

	//Virtual function. Sub classes must define a function to generate a height map
	virtual void generateHeightMap() = 0;

	//Generates a heightMapModel after the height map has been generated by a subclass.
	virtual void generateHeightMapModel();

	//Draws the model and heightmap model using the given view and projection matrices
	virtual void draw(const glm::mat4x4& view_matrix, const glm::mat4x4& projection_matrix) const;
	virtual void draw(const glm::mat4x4& view_matrix, const glm::mat4x4& projection_matrix, const glm::vec3& camera_pos) const;

	//Draws the model and heightmap model to the depth render to texture shader.
	//The depthMatrixID is the uniform location for the MVP.
	virtual void drawDepth(const glm::mat4x4& depth_view_projection_matrix) const;

	virtual float getHeightAtPosition(float x, float z) const;

	float getSpeedFactor() const;
	float getAccelFactor() const;
	float getFriction() const;
	float getSlopeFactor() const;
};

